<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {


    class base_template_ffc58001a9de2a774c8f3f5e79a633e8ff56da16
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Main.php.tpl
     */
    class class_5a8e3dd10ba54d93f20a66e74f8900626b396ed8 extends base_template_ffc58001a9de2a774c8f3f5e79a633e8ff56da16
    {

        public function hasSection($name)
        {

            return false;
        }


        public function renderSection($name, Array $args = array(), $fail_on_missing = true)
        {
            if (!$this->hasSection($name)) {
                if ($fail_on_missing) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }
                return "";
            }

        }

        public function enhanceException(Exception $e, $section = NULL)
        {
            if (!empty($e->enhanced)) {
                return;
            }

            $message = $e->getMessage() . "( IN " . 'Main.php.tpl';
            if ($section) {
                $message .= " | section: {$section}";
            }
            $message .= ")";

            $object   = new ReflectionObject($e);
            $property = $object->getProperty('message');
            $property->setAccessible(true);
            $property->setValue($e, $message);

            $e->enhanced = true;
        }

        public function render(Array $vars = array(), $return = false)
        {
            try {
                return $this->_render($vars, $return);
            } catch (Exception $e) {
                if ($return) ob_get_clean();
                $this->enhanceException($e);
                throw $e;
            }
        }

        public function _render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }

            echo "<?php\n\nuse crodas\\Build\\TFunction;\n\n\$doBuild = false;\n\nif (!\$doBuild) {\n";
            foreach($self->getTasks() as $task => $method) {

                $this->context['task'] = $task;
                $this->context['method'] = $method;
                echo "    \$this->tasks[";
                var_export($task);
                echo "] = new TFunction(\n        ";
                var_export($method->getFile());
                echo ",\n        ";
                var_export($method instanceof \notoj\Object\zMethod ? [$method->getClass()->getName(), $method->GetName()] : $method->getName());
                echo ", \n        ";
                var_export( $method instanceof \Notoj\Object\zMethod ? $method->getObject()->isStatic() : false);
                echo "\n    );\n";
            }
            echo "}\n\n\n/**\n * Build watch file, DO not edit this file manually \n */\nreturn ";
            var_export($return);
            echo ";\n";

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace crodas\Build {


    class Templates
    {
        public static function getAll()
        {
            return array (
                0 => 'main',
            );
        }

        public static function getAllSections($name, $fail = true)
        {
            switch ($name) {
            default:
                if ($fail) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }

                return array();
            }
        }

        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'main.php.tpl' => 'class_5a8e3dd10ba54d93f20a66e74f8900626b396ed8',
                'main' => 'class_5a8e3dd10ba54d93f20a66e74f8900626b396ed8',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
